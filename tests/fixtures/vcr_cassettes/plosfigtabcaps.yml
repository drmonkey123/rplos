http_interactions:
- request:
    method: get
    uri: http://api.plos.org/search?q=figure_table_caption%3A%22ecology%22&fl=figure_table_caption&rows=0&wt=json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.4.9310
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.14.1
      date: Fri, 03 May 2019 02:02:29 GMT
      content-type: application/json;charset=utf-8
      content-length: '57'
      connection: keep-alive
      last-modified: Thu, 02 May 2019 20:22:43 GMT
      etag: '"YzJlODc4MDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      string: ewogICJyZXNwb25zZSI6eyJudW1Gb3VuZCI6MTEzMSwic3RhcnQiOjAsImRvY3MiOltdCiAgfX0K
  recorded_at: 2019-05-03 02:02:28 GMT
  recorded_with: vcr/0.2.6, webmockr/0.3.4.9100
- request:
    method: get
    uri: http://api.plos.org/search?q=figure_table_caption%3A%22ecology%22&fl=figure_table_caption&start=0&rows=10&wt=json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.4.9310
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.14.1
      date: Fri, 03 May 2019 02:02:30 GMT
      content-type: application/json;charset=utf-8
      content-length: '24470'
      connection: keep-alive
      last-modified: Thu, 02 May 2019 20:22:43 GMT
      etag: '"YzJlODc4MDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2019-05-03 02:02:28 GMT
  recorded_with: vcr/0.2.6, webmockr/0.3.4.9100
