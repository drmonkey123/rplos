http_interactions:
- request:
    method: get
    uri: http://api.plos.org/search?q=abstract%3A%22drosophila%22&fl=abstract%2Cid&rows=0&wt=json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.12.2
      date: Thu, 24 May 2018 05:23:21 GMT
      content-type: application/json; charset=UTF-8
      content-length: '51'
      connection: keep-alive
      last-modified: Wed, 23 May 2018 20:20:59 GMT
      etag: '"MTFlMjE4MDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      string: eyJyZXNwb25zZSI6eyJudW1Gb3VuZCI6MzQwMiwic3RhcnQiOjAsImRvY3MiOltdfX0K
  recorded_at: 2018-05-24 05:23:22 GMT
  recorded_with: vcr/0.1.0, webmockr/0.2.6, crul/0.5.2
- request:
    method: get
    uri: http://api.plos.org/search?q=abstract%3A%22drosophila%22&fl=abstract%2Cid&start=0&rows=10&wt=json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.12.2
      date: Thu, 24 May 2018 05:23:21 GMT
      content-type: application/json; charset=UTF-8
      content-length: '15630'
      connection: keep-alive
      last-modified: Wed, 23 May 2018 20:20:59 GMT
      etag: '"MTFlMjE4MDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2018-05-24 05:23:22 GMT
  recorded_with: vcr/0.1.0, webmockr/0.2.6, crul/0.5.2
- request:
    method: get
    uri: http://api.plos.org/search?q=abstract%3A%22drosophila%22&fl=abstract&rows=0&wt=json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.12.2
      date: Thu, 24 May 2018 05:23:21 GMT
      content-type: application/json; charset=UTF-8
      content-length: '51'
      connection: keep-alive
      last-modified: Wed, 23 May 2018 20:20:59 GMT
      etag: '"ZjYwYzE4MDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      string: eyJyZXNwb25zZSI6eyJudW1Gb3VuZCI6MzQwMiwic3RhcnQiOjAsImRvY3MiOltdfX0K
  recorded_at: 2018-05-24 05:23:22 GMT
  recorded_with: vcr/0.1.0, webmockr/0.2.6, crul/0.5.2
- request:
    method: get
    uri: http://api.plos.org/search?q=abstract%3A%22drosophila%22&fl=abstract&start=0&rows=5&wt=json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.12.2
      date: Thu, 24 May 2018 05:23:22 GMT
      content-type: application/json; charset=UTF-8
      content-length: '6949'
      connection: keep-alive
      last-modified: Wed, 23 May 2018 20:20:59 GMT
      etag: '"ZjYwYzE4MDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2018-05-24 05:23:22 GMT
  recorded_with: vcr/0.1.0, webmockr/0.2.6, crul/0.5.2
